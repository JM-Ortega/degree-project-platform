# ======================================================
# Configuracion general del microservicio
# ======================================================
spring:
  application:
    name: academic-project-service   # Cambiar por el nombre del micro

  # ======================================================
  # Subidas multipart (límite del micro)
  # ======================================================
  servlet:
    multipart:
      max-file-size: 60MB        # tamaño máx. por archivo
      max-request-size: 60MB     # tamaño máx. del request completo (incluye metadatos multipart)

  # ======================================================
  #  Configuracion de base de datos (SQLite local)
  # ======================================================
  datasource:
    url: jdbc:sqlite:./data/academic-project.db
    driver-class-name: org.sqlite.JDBC
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.community.dialect.SQLiteDialect

  # ======================================================
  # Configuracion de mensajeria (RabbitMQ)
  # ======================================================
  rabbitmq:
    host: localhost
    port: 5672
    username: appuser
    password: apppass
    publisher-confirm-type: correlated
    publisher-returns: true
    template:
      mandatory: true
    listener:
      simple:
        acknowledge-mode: auto
        concurrency: 2
        max-concurrency: 8
        prefetch: 20
        default-requeue-rejected: false

# ======================================================
# Topologia de mensajeria (nombres reutilizables)
# ======================================================
messaging:
  exchange:
    main: degree.events
    dlx: degree.dlx
  queues:
    auth: auth-service.q
    project: academic-project-service.q
    coordinator: coordinator-service.q
    department: department-head-service.q
    notification: notification-service.q
    authDlq: auth-service.dlq
    projectDlq: academic-project-service.dlq
    coordinatorDlq: coordinator-service.dlq
    departmentDlq: department-head-service.dlq
    notificationDlq: notification-service.dlq
  routing:
    userCreated: auth.user.created
    projectCreated: project.created
    projectUpdated: project.updated
    formatAApprovedByCoordinator: coordinator.formata.approved
    proposalApprovedByDeptHead: department.proposal.approved
    notificationAny: notification.send.*

# ======================================================
# Configuracion del servidor embebido (Tomcat)
# ======================================================
server:
  port: 8082

# ======================================================
# Actuator
# ======================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info   # /actuator/health vía gateway: /api/academic/actuator/health

# ======================================================
# Configuracion de Swagger / OpenAPI
# ======================================================
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha

# ======================================================
# Logs y formato basico
# ======================================================
logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
  file:
    name: logs/${spring.application.name}.log
